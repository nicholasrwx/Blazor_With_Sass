@page "/cardgrid"
@inject IJSRuntime JSRuntime

<PageTitle>Card Grid Animation</PageTitle>

<h1>Card Grid Animation</h1>

<section class="sectionOne">
    <div class="card__container">
        <div class="inner__card">
            <div class="inner__card-front"> Front Side </div>
            <div class="inner__card-back"> Back Side </div>
        </div>
    </div>

</section>
<section class="sectionTwo">
      <div class="tile__one" id=@(Tiles[One].Item2) @onmouseover="() => Rotate(One)" @onmouseout="() => Rotate(One)"></div>
      <div class="tile__two" id=@(Tiles[Two].Item2) @onmouseover="() => Rotate(Two)" @onmouseout="() => Rotate(Two)"></div>
      <div class="tile__three" id=@(Tiles[Three].Item2) @onmouseover="() => Rotate(Three)" @onmouseout="() => Rotate(Three)"></div>
      <div class="tile__four" id=@(Tiles[Four].Item2) @onmouseover="() => Rotate(Four)" @onmouseout="() => Rotate(Four)"></div>
      <div class="tile__five" id=@(Tiles[Five].Item2) @onmouseover="() => Rotate(Five)" @onmouseout="() => Rotate(Five)"></div>
      <div class="tile__six" id=@(Tiles[Six].Item2) @onmouseover="() => Rotate(Six)" @onmouseout="() => Rotate(Six)"></div>
      <div class="tile__seven" id=@(Tiles[Seven].Item2) @onmouseover="() => Rotate(Seven)" @onmouseout="() => Rotate(Seven)"></div>
      <div class="tile__eight" id=@(Tiles[Eight].Item2) @onmouseover="() => Rotate(Eight)" @onmouseout="() => Rotate(Eight)"></div>
      <div class="tile__nine" id=@(Tiles[Nine].Item2) @onmouseover="() => Rotate(Nine)" @onmouseout="() => Rotate(Nine)"></div>
 </section>
 <section class="sectionThree">
         <div class="card__container">
        <div class="inner__card">
            <div class="inner__card-front"> Front Side </div>
            <div class="inner__card-back"> Back Side </div>
        </div>
    </div>

 </section>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await JSRuntime.InvokeVoidAsync("scrollToAnimate", ".sectionTwo");
        }
    }

    private string One = "One";
    private string Two = "Two";
    private string Three = "Three";
    private string Four = "Four";
    private string Five = "Five";
    private string Six = "Six";
    private string Seven = "Seven";
    private string Eight = "Eight";
    private string Nine = "Nine";

    private Dictionary<string, (bool, string)> Tiles = new Dictionary<string, (bool, string)> {
        {"One", (false, string.Empty)},
        {"Two", (false, string.Empty)},
        {"Three", (false, string.Empty)},
        {"Four", (false, string.Empty)},
        {"Five", (false, string.Empty)},
        {"Six", (false, string.Empty)},
        {"Seven", (false, string.Empty)},
        {"Eight", (false, string.Empty)},
        {"Nine", (false, string.Empty)}
    };

    private void Rotate(string tileNumber)
    {
        if (!Tiles[tileNumber].Item1) {
            Tiles[tileNumber] = (true, "rotate");
        } else {
            Tiles[tileNumber] = (false, string.Empty);
        }
    }
}
