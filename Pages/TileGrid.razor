@page "/tilegrid"
@inject IJSRuntime JSRuntime

<PageTitle>Tile Grid Animation</PageTitle>

<h1>Tile Grid Animation</h1>

<section class="sectionOne">
        <span class="spacer"/>
</section>
<section class="sectionTwo">
    <div class="tile__one">
        <div class="tile__one-content" id=@(Tiles[One].Item2) @onmouseover="() => Rotate(One)" @onmouseout="() => Rotate(One)"></div>
    </div>
    <div class="tile__two">
        <div class="tile__two-content" id=@(Tiles[Two].Item2) @onmouseover="() => Rotate(Two)" @onmouseout="() => Rotate(Two)"></div>
    </div>
    <div class="tile__three">
        <div class="tile__three-content" id=@(Tiles[Three].Item2) @onmouseover="() => Rotate(Three)" @onmouseout="() => Rotate(Three)"></div>
    </div>
    <div class="tile__four">  
        <div class="tile__four-content" id=@(Tiles[Four].Item2) @onmouseover="() => Rotate(Four)" @onmouseout="() => Rotate(Four)"></div>
    </div>
    <div class="tile__five">
        <div class="tile__five-content" id=@(Tiles[Five].Item2) @onmouseover="() => Rotate(Five)" @onmouseout="() => Rotate(Five)"></div>
    </div>
    <div class="tile__six">
        <div class="tile__six-content" id=@(Tiles[Six].Item2) @onmouseover="() => Rotate(Six)" @onmouseout="() => Rotate(Six)"></div>
    </div>
    <div class="tile__seven">
        <div class="tile__seven-content" id=@(Tiles[Seven].Item2) @onmouseover="() => Rotate(Seven)" @onmouseout="() => Rotate(Seven)"></div>
    </div>
    <div class="tile__eight">
        <div class="tile__eight-content" id=@(Tiles[Eight].Item2) @onmouseover="() => Rotate(Eight)" @onmouseout="() => Rotate(Eight)"></div>
    </div>
    <div class="tile__nine">
        <div class="tile__nine-content" id=@(Tiles[Nine].Item2) @onmouseover="() => Rotate(Nine)" @onmouseout="() => Rotate(Nine)"></div>
    </div>
</section>
<section class="sectionThree">
    <span class="spacer"/>
</section>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await JSRuntime.InvokeVoidAsync("scrollToAnimate", ".sectionTwo");
        }
    }

    private string One = "One";
    private string Two = "Two";
    private string Three = "Three";
    private string Four = "Four";
    private string Five = "Five";
    private string Six = "Six";
    private string Seven = "Seven";
    private string Eight = "Eight";
    private string Nine = "Nine";

    private Dictionary<string, (bool, string)> Tiles = new Dictionary<string, (bool, string)> {
        {"One", (false, string.Empty)},
        {"Two", (false, string.Empty)},
        {"Three", (false, string.Empty)},
        {"Four", (false, string.Empty)},
        {"Five", (false, string.Empty)},
        {"Six", (false, string.Empty)},
        {"Seven", (false, string.Empty)},
        {"Eight", (false, string.Empty)},
        {"Nine", (false, string.Empty)}
    };

    private void Rotate(string tileNumber)
    {
        if (!Tiles[tileNumber].Item1) {
            Tiles[tileNumber] = (true, "rotate");
        } else {
            Tiles[tileNumber] = (false, string.Empty);
        }
    }
}
